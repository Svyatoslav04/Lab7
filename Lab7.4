using System;
using System.Collections.Generic;

class TaskScheduler<TTask, TPriority>
{
    private PriorityQueue<TPriority, TTask> taskQueue = new PriorityQueue<TPriority, TTask>();
    private Func<TTask, TPriority> priorityFunction;

    public TaskScheduler(Func<TTask, TPriority> priorityFunction)
    {
        this.priorityFunction = priorityFunction;
    }

    public void AddTask(TTask task)
    {
        TPriority priority = priorityFunction(task);
        taskQueue.Enqueue(priority, task);
    }

    public TTask ExecuteNext()
    {
        if (taskQueue.Count == 0)
        {
            return default(TTask);
        }
        KeyValuePair<TPriority, TTask> taskEntry = taskQueue.Dequeue();
        return taskEntry.Value;
    }
}

class PriorityQueue<TPriority, TValue>
{
    private SortedDictionary<TPriority, Queue<TValue>> dict = new SortedDictionary<TPriority, Queue<TValue>>();

    public void Enqueue(TPriority priority, TValue value)
    {
        if (!dict.TryGetValue(priority, out var queue))
        {
            queue = new Queue<TValue>();
            dict[priority] = queue;
        }
        queue.Enqueue(value);
    }

    public KeyValuePair<TPriority, TValue> Dequeue()
    {
        var firstPair = dict.First();
        var value = firstPair.Value.Dequeue();
        if (firstPair.Value.Count == 0)
            dict.Remove(firstPair.Key);
        return new KeyValuePair<TPriority, TValue>(firstPair.Key, value);
    }

    public int Count => dict.Count;
}

class Program
{
    static void Main()
    {
        TaskScheduler<string, int> taskScheduler = new TaskScheduler<string, int>(s => s.Length);

        taskScheduler.AddTask("Task1");
        taskScheduler.AddTask("Task2");
        taskScheduler.AddTask("Task3");

        Console.WriteLine(taskScheduler.ExecuteNext());
        Console.WriteLine(taskScheduler.ExecuteNext());
    }
}
