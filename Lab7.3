using System;
using System.Collections.Generic;

class FunctionCache<TKey, TResult>
{
    private Dictionary<TKey, TResult> cache = new Dictionary<TKey, TResult>();
    private Dictionary<TKey, DateTime> expirationTimes = new Dictionary<TKey, DateTime>();
    private TimeSpan cacheDuration;

    public FunctionCache(TimeSpan cacheDuration)
    {
        this.cacheDuration = cacheDuration;
    }

    public TResult GetOrCompute(TKey key, Func<TKey, TResult> computeFunction)
    {
        if (cache.ContainsKey(key) && DateTime.Now - expirationTimes[key] <= cacheDuration)
        {
            return cache[key];
        }

        TResult result = computeFunction(key);
        cache[key] = result;
        expirationTimes[key] = DateTime.Now;
        return result;
    }

    public void ClearExpiredItems()
    {
        List<TKey> expiredKeys = new List<TKey>();
        foreach (var kvp in expirationTimes)
        {
            if (DateTime.Now - kvp.Value > cacheDuration)
            {
                expiredKeys.Add(kvp.Key);
            }
        }

        foreach (var key in expiredKeys)
        {
            cache.Remove(key);
            expirationTimes.Remove(key);
        }
    }
}

class Program
{
    static void Main()
    {
        FunctionCache<string, int> cache = new FunctionCache<string, int>(TimeSpan.FromMinutes(1));

        Func<string, int> expensiveComputation = key =>
        {
            return key.Length * 2;
        };

        Console.WriteLine(cache.GetOrCompute("apple", expensiveComputation));
        Console.WriteLine(cache.GetOrCompute("apple", expensiveComputation));

        System.Threading.Thread.Sleep(60000);
        cache.ClearExpiredItems();
    }
}
